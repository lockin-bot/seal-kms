// Copyright (c), Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

module app::kms;

use sui::address::to_bytes;
use enclave::enclave::{Self, Enclave};

const SEAL_INTENT: u8 = 0;
const SET_MASTER_KEY_INTENT: u8 = 1;
const ENoAccess: u64 = 77;

public struct SealRequest has copy, drop {
    timestamp_ms: u64,
    id: vector<u8>,
    requester: vector<u8>,
}

public struct SetMasterKeyRequest has copy, drop {
    encrypted_key: vector<u8>,
    iv: vector<u8>,
    tag: vector<u8>,
}

public struct EncryptedMasterKey has key {
    id: UID,
    encrypted_key: vector<u8>,
    iv: vector<u8>,
    tag: vector<u8>,
    version: u64,
    updated_at: u64,
}

public struct KMS has drop {}

fun init(otw: KMS, ctx: &mut TxContext) {
    let cap = enclave::new_cap(otw, ctx);
    transfer::public_transfer(cap, ctx.sender());
    let encrypted_master_key = EncryptedMasterKey {
        id: object::new(ctx),
        encrypted_key: vector::empty<u8>(),
        iv: vector::empty<u8>(),
        tag: vector::empty<u8>(),
        version: 0,
        updated_at: 0,
    };
    transfer::share_object(encrypted_master_key);
}

fun check_enclave_access(
    id: vector<u8>,
    timestamp_ms: u64,
    sig: &vector<u8>,
    enclave: &Enclave<KMS>,
    ctx: &TxContext,
): bool {
    let res = enclave.verify_signature(
        SEAL_INTENT,
        timestamp_ms,
        SealRequest { timestamp_ms, id, requester: to_bytes(ctx.sender()) },
        sig,
    );
    res
}

entry fun seal_approve(
    id: vector<u8>,
    timestamp_ms: u64,
    sig: vector<u8>,
    enclave: &Enclave<KMS>,
    ctx: &TxContext,
) {
    assert!(check_enclave_access(id, timestamp_ms, &sig, enclave, ctx), ENoAccess);
}

public fun set_master_key(
    encrypted_master_key: &mut EncryptedMasterKey,
    enclave: &Enclave<KMS>,
    timestamp_ms: u64,
    encrypted_key: vector<u8>,
    iv: vector<u8>,
    tag: vector<u8>,
    sig: vector<u8>,
    clock: &sui::clock::Clock) {
    assert!(enclave.verify_signature(
        SET_MASTER_KEY_INTENT,
        timestamp_ms,
        SetMasterKeyRequest { encrypted_key, iv, tag },
        &sig
    ), ENoAccess);
    encrypted_master_key.encrypted_key = encrypted_key;
    encrypted_master_key.iv = iv;
    encrypted_master_key.tag = tag;
    encrypted_master_key.version = encrypted_master_key.version + 1;
    encrypted_master_key.updated_at = clock.timestamp_ms();
}

#[test]
fun test_seal_flow() {
    use sui::test_scenario::{Self, ctx, next_tx};
    use sui::nitro_attestation;
    use sui::test_utils::destroy;
    use enclave::enclave::{register_enclave, create_enclave_config, update_pcrs, EnclaveConfig};

    let mut scenario = test_scenario::begin(@0x1);
    let mut clock = sui::clock::create_for_testing(scenario.ctx());
    clock.set_for_testing(1754230155961);

    let cap = enclave::new_cap(KMS {}, scenario.ctx());
    cap.create_enclave_config(
        b"kms enclave".to_string(),
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        scenario.ctx().sender(),
        scenario.ctx(),
    );

    scenario.next_tx(@0x1);

    let mut config = scenario.take_shared<EnclaveConfig<KMS>>();

    config.update_pcrs(
        &cap,
        x"cf2213f31f8d948d64a4b23f6cb7f4dad7897e2a4bfd6d4e7fed6a315efea6a7a3eef61533338e009623155cd936322e",
        x"cf2213f31f8d948d64a4b23f6cb7f4dad7897e2a4bfd6d4e7fed6a315efea6a7a3eef61533338e009623155cd936322e",
        x"21b9efbc184807662e966d34f390821309eeac6802309798826296bf3e8bec7c10edb30948c90ba67310f7b964fc500a",
    );

    config.update_register(&cap, @0x2);

    scenario.next_tx(@0x2);
    let payload =
        x"8444a1013822a0591122bf696d6f64756c655f69647827692d30363163383738393062666332336237652d656e633031393837303337333462386632653666646967657374665348413338346974696d657374616d701b0000019870406d5b6470637273b0005830cf2213f31f8d948d64a4b23f6cb7f4dad7897e2a4bfd6d4e7fed6a315efea6a7a3eef61533338e009623155cd936322e015830cf2213f31f8d948d64a4b23f6cb7f4dad7897e2a4bfd6d4e7fed6a315efea6a7a3eef61533338e009623155cd936322e02583021b9efbc184807662e966d34f390821309eeac6802309798826296bf3e8bec7c10edb30948c90ba67310f7b964fc500a035830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045830643a83cc1e2d4fdd9f7c4a455f6ccab87ba3f69482fefe7a519d26d058203a41066f84e41d9c2c71dd430419dfaaa43fa58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006b636572746966696361746559027f3082027b30820201a00302010202100198703734b8f2e600000000688f6a51300a06082a8648ce3d04030330818e310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533139303706035504030c30692d30363163383738393062666332336237652e75732d656173742d312e6177732e6e6974726f2d656e636c61766573301e170d3235303830333133353532365a170d3235303830333136353532395a308193310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753313e303c06035504030c35692d30363163383738393062666332336237652d656e63303139383730333733346238663265362e75732d656173742d312e6177733076301006072a8648ce3d020106052b810400220362000485aefc3dd666ec8c83b001c4c9d8370d46dcbd21ef5c925b7508304dcd40bc1ff6c83646a99bc6a7897c19ecae5521cc4e586049ebf6212ede8d30b254c7077a608c3499e376d1511ad83112fda84064dc5f039b1a549bf1cea7c8bf470e6677a31d301b300c0603551d130101ff04023000300b0603551d0f0404030206c0300a06082a8648ce3d0403030368003065023044745bede35f156c2c53c05a076ddac2a60387945106c60edb0ae7e4dbb267796ad798007ebec389476946609fd435490231008b695fc538c44fa84dc009677beb1f2590b7aac9324c9dd09edfde718bf6cb7ad567c2e4889b73475f6f26137f8744d068636162756e646c65845902153082021130820196a003020102021100f93175681b90afe11d46ccb4e4e7f856300a06082a8648ce3d0403033049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c61766573301e170d3139313032383133323830355a170d3439313032383134323830355a3049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b8104002203620004fc0254eba608c1f36870e29ada90be46383292736e894bfff672d989444b5051e534a4b1f6dbe3c0bc581a32b7b176070ede12d69a3fea211b66e752cf7dd1dd095f6f1370f4170843d9dc100121e4cf63012809664487c9796284304dc53ff4a3423040300f0603551d130101ff040530030101ff301d0603551d0e041604149025b50dd90547e796c396fa729dcf99a9df4b96300e0603551d0f0101ff040403020186300a06082a8648ce3d0403030369003066023100a37f2f91a1c9bd5ee7b8627c1698d255038e1f0343f95b63a9628c3d39809545a11ebcbf2e3b55d8aeee71b4c3d6adf3023100a2f39b1605b27028a5dd4ba069b5016e65b4fbde8fe0061d6a53197f9cdaf5d943bc61fc2beb03cb6fee8d2302f3dff65902c3308202bf30820245a003020102021100c368dfeb3e5e76b14958d524cec1405f300a06082a8648ce3d0403033049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c61766573301e170d3235303733303035333235355a170d3235303831393036333235355a3064310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533136303406035504030c2d613362303834373037363436643264642e75732d656173742d312e6177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b81040022036200043707a1a3c5618f92dea428eed48acca95df7581d649c401cb9694886a465e7660d8aa32aa3d8f2e0f029840412da4c59f2c9fc48dbd458f6172e6ed7015f474296b092ff8d4496044b673ff2a0c37b7304114f19f30ee752862f1c5568d975e1a381d53081d230120603551d130101ff040830060101ff020102301f0603551d230418301680149025b50dd90547e796c396fa729dcf99a9df4b96301d0603551d0e04160414b18c4b3fbcff647351ec67786007c8a9fe8a58a2300e0603551d0f0101ff040403020186306c0603551d1f046530633061a05fa05d865b687474703a2f2f6177732d6e6974726f2d656e636c617665732d63726c2e73332e616d617a6f6e6177732e636f6d2f63726c2f61623439363063632d376436332d343262642d396539662d3539333338636236376638342e63726c300a06082a8648ce3d0403030368003065023100a6c8f38dccfaa279b0fc65bec43b3037b7fa827af56f950fe24872afc4c49b35fbdbd453b24991e5f33e8ac7c6c00ffa02303c50f5a2259d43869048c936771f10c54a60c5d4f1d184e0ed06e38f592f4b67e5688d2c8bf892ed0a8eb998ed89b1c5590317308203133082029aa003020102021079044135894f4e2f76a8801afb216fa1300a06082a8648ce3d0403033064310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533136303406035504030c2d613362303834373037363436643264642e75732d656173742d312e6177732e6e6974726f2d656e636c61766573301e170d3235303830323233303834365a170d3235303830383132303834355a308189313c303a06035504030c33363237643164626636313834396230372e7a6f6e616c2e75732d656173742d312e6177732e6e6974726f2d656e636c61766573310c300a060355040b0c03415753310f300d060355040a0c06416d617a6f6e310b3009060355040613025553310b300906035504080c0257413110300e06035504070c0753656174746c653076301006072a8648ce3d020106052b810400220362000485d156aa7a873ff6a2dc26500590823d35452c5dcee6483f4430bc0e18ce91ec88fba043cd1f57806decbf8410145e3d54fc8305a17740b6a9295db1bdbad08db4d23b0ed8044bbf9668fd4f770c52cf1aa06eb9b8d70d3fae2a2221ed6333f0a381ea3081e730120603551d130101ff040830060101ff020101301f0603551d23041830168014b18c4b3fbcff647351ec67786007c8a9fe8a58a2301d0603551d0e04160414019a9c505c37bb223895b32e3ba554f960fc97cb300e0603551d0f0101ff0404030201863081800603551d1f047930773075a073a071866f687474703a2f2f63726c2d75732d656173742d312d6177732d6e6974726f2d656e636c617665732e73332e75732d656173742d312e616d617a6f6e6177732e636f6d2f63726c2f64393830326639382d643530392d343938632d616235382d3761326661336437613134372e63726c300a06082a8648ce3d0403030367003064023029f6f7857a2f9900f9898989c6ad46fd01636f264b351864e4a87794a629a2aa11e84d58e9f9cc98d212c858cad8d940023062353d6e9c159e37fc49149378939435a3a5bae88d7cf853fa00372a78ca1176b546fb13f5ff1656b0da005cb90581ed5902c4308202c030820245a0030201020215008321227f83bc68350c69958e5245597fe84486d5300a06082a8648ce3d040303308189313c303a06035504030c33363237643164626636313834396230372e7a6f6e616c2e75732d656173742d312e6177732e6e6974726f2d656e636c61766573310c300a060355040b0c03415753310f300d060355040a0c06416d617a6f6e310b3009060355040613025553310b300906035504080c0257413110300e06035504070c0753656174746c65301e170d3235303830333037323430325a170d3235303830343037323430325a30818e310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533139303706035504030c30692d30363163383738393062666332336237652e75732d656173742d312e6177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b8104002203620004406adc05a3ce0c9f7b96104a435e6ec3d0a7e4fe0e3865c7be9725cebc9c4246f0d37024fc17e744139918e0c22ffa20f24a0fe7fd6faae8ea3aaf25eaa77ad997488f134779fd70d932245803e44337bf7fc7ddfccabc08f63f6fa3742582e3a366306430120603551d130101ff040830060101ff020100300e0603551d0f0101ff040403020204301d0603551d0e0416041464ef23f6c28275adae0216779ff9840408a0ef72301f0603551d23041830168014019a9c505c37bb223895b32e3ba554f960fc97cb300a06082a8648ce3d0403030369003066023100fb06075ef800e5fcf912091259cf2568887ceb574ca8164d98b591165406dbbb7b54bb61b0334343ae576167681b5e05023100b0fac041005a8a67c5cc4f755a76cf248d9c491dca39d8e17fd188b6eaa9689037bbd39c39f1495b96310e80b02ab5ca6a7075626c69635f6b65795820de90f63794f3eda101f28b325545ff94883c1697c40cb9d319363ff76f190c5269757365725f64617461f6656e6f6e6365f6ff58607e962d6880e2325e44bc6532e1860cda8b80479566ac7d555e76b8217a5419648823a4fdb008cdbffcd3ae8a043abfae59601efefacbce43d8b7a801f07e47a782f4f8ec16536e29a014d1c8994f57f67b4032111d683dd223e965620a6eb4bc";
    let document = nitro_attestation::load_nitro_attestation(payload, &clock);
    config.register_enclave(document, scenario.ctx());

    scenario.next_tx(@0x8e836a1c655570881882ed799e845e0b0a6c6b22810f30ae6bfbd5b757d5f2f7);

    let enclave = scenario.take_shared<Enclave<KMS>>();

    let sig =
        x"40eff1cd97d76d74d05491341213b68114f5fa8f58fca00ab2971adeef3b687ca7b7d26cfb7a5f99851de6f3efb5af77dbfedfc3054368eac645f269eae3720d";
    let approved = check_enclave_access(
        x"0b6c6f636b696e5f74657374",
        1754230155961,
        &sig,
        &enclave,
        scenario.ctx(),
    );

    assert!(approved, ENoAccess);
    test_scenario::return_shared(config);
    clock.destroy_for_testing();
    enclave.destroy();
    destroy(cap);
    scenario.end();
}
